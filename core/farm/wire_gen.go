// Code generated by Wire. DO NOT EDIT.

//go:generate wire
//+build !wireinject

package farm

import (
	"reinvest/core"
	"reinvest/core/farm/config"
	"reinvest/printer"
	"reinvest/token"
)

// Injectors from wire.go:

func NewFarm() (Farm, func(), error) {
	netInfo, cleanup, err := config.NewNetWork()
	if err != nil {
		return nil, nil, err
	}
	poolID, cleanup2, err := config.NewPool()
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	string2, cleanup3, err := config.NewPrivateKey()
	if err != nil {
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	farmConfig, cleanup4, err := config.NewFarmConfig(netInfo, poolID, string2)
	if err != nil {
		cleanup3()
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	client, cleanup5, err := core.Connect(netInfo)
	if err != nil {
		cleanup4()
		cleanup3()
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	tokenBasic, cleanup6, err := token.NewTokenBasic(farmConfig, client)
	if err != nil {
		cleanup5()
		cleanup4()
		cleanup3()
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	printerPrinter := printer.NewPrinter()
	farm, cleanup7, err := InitFarm(farmConfig, client, tokenBasic, printerPrinter)
	if err != nil {
		cleanup6()
		cleanup5()
		cleanup4()
		cleanup3()
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	return farm, func() {
		cleanup7()
		cleanup6()
		cleanup5()
		cleanup4()
		cleanup3()
		cleanup2()
		cleanup()
	}, nil
}
